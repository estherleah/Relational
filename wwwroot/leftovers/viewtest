collaborative filter view draft

EXAMPLE CREATE VIEW statement
CREATE VIEW noofgrade(grade,gradecount)
AS SELECT grade,COUNT(*)
FROM customer
GROUP BY grade;

create string - "matches" . '$userIDEscaped' - e.g for user1, matches1, user2 - matches2, etc

SELECT * FROM matches1 (Will return that view.)
//column names are userID, matches

CREATE OR REPLACE VIEW matches1 AS
                            (SELECT userID, COUNT(userID) AS matches
                            FROM (
                              (SELECT DISTINCT userID2 AS userID
                              FROM friendship AS fo
                              WHERE userID1 IN
                                (SELECT userID2
                                FROM friendship
                                WHERE userID1 = '3')
                              AND status = 1
                              AND fo.userID2 NOT IN
                                (SELECT userID2
                                FROM friendship
                                WHERE userID1 = '3')
                              AND userID2 != '3'
                              ORDER BY RAND()
                              )
                            UNION ALL
                              (SELECT DISTINCT userID
                              FROM circle_participants AS c
                              WHERE c.circleID IN
                                (SELECT circleID
                                FROM circle_participants
                                WHERE userID = '3')
                              AND userID != '3'
                              AND NOT EXISTS
                                (SELECT *
                                FROM friendship AS f
                                WHERE f.userID1 = '3'
                                AND f.userID2 = c.userID)
                              ORDER BY RAND()
                              )
                            UNION ALL
                              (SELECT DISTINCT userID
                              FROM user AS u2
                              WHERE u2.location IN
                                (SELECT location
                                FROM user
                                WHERE userID = '3')
                              AND u2.userID != '3'
                              AND NOT EXISTS
                                (SELECT *
                                FROM friendship AS f
                                WHERE f.userID1 = '3'
                                AND f.userID2 = u2.userID)
                              ORDER BY RAND()
                              )
                            ) result
                            GROUP BY result.userID
                            ORDER BY matches DESC

                              )
                            ";

------------------------------------------------------------------------
THIS SHOULD CORRECTLY JOIN THE PROFILE PHOTOS, NAMES ETC OF ALL THE PEOPLE IN THE RECOMMENDED FRIENDS VIEWS
AND ORDERS THEM BY MATCHES (DESC)

SELECT u.profilephotoURL, u.firstName, u.lastName, u.userID, view.matches
              FROM matches2 AS view INNER JOIN user AS u
              ON view.userID = u.userID
              ORDER BY matches DESC

------------------------------------------------------------------------
OLD VIEWS COLLABORATIVE FILTERING - ONLY SHOWS THEIR USERID AND NO OF MATCHES

<!--THIS IS BASICALLY THE STRIPPED DOWN COLLABORATIVE FILTERING THING WITHOUT PHOTOS-->
<!-- THIS IS FROM "VERYOLDFRIENDS.PHP"-->
<!-- ATTEMPTING TO TEST VIEWS HERE-->
<?php
while ($row = mysqli_fetch_array($getViewResult)) {
   $theirUserID = $row['userID'];
   $matches = $row['matches'];
   ?>

   <div class="recommendedFriends row">

           <button type="button"
              class="btn btn-primary btnChangeCircleMemberStatus btnAdd"
              role="button"
              data-id="<?php echo $theirUserID ?>"
              >
              Add
          </button>

       <!-- </div> -->

       <span class="circleMemberName">
           <?php echo "Their UserID: " . $theirUserID;?> <?php echo "Matches: " . $matches; ?>
       </span>
       <br>
       <span class="circleMemberStatus">
         <?php
             echo "Collaborative Filter" ?>
       </span>

       </br>
       <p>

   </div>
   <?php
}
?>
---------------------------------------------
NEED TO BREAK SUBQUERIES INTO VIEWS TO MAKE IT BACKWARDS-COMPATIBLE WITH ANCIENT MYSQL VERSIONS

CREATE OR REPLACE VIEW mutualview AS SELECT userID, COUNT(userID) AS matches
FROM (
  (SELECT DISTINCT userID2 AS userID
  FROM friendship AS fo
  WHERE userID1 IN
    (SELECT userID2
    FROM friendship
    WHERE userID1 = '$thisUserID')
  AND status = 1
  AND fo.userID2 NOT IN
    (SELECT userID2
    FROM friendship
    WHERE userID1 = '$thisUserID')
  AND userID2 != '$thisUserID'
  ORDER BY RAND()

CREATE OR REPLACE VIEW circleview AS SELECT DISTINCT userID
FROM circle_participants AS c
WHERE c.circleID IN
  (SELECT circleID
  FROM circle_participants
  WHERE userID = '$thisUserID')
AND userID != '$thisUserID'
AND NOT EXISTS
  (SELECT *
  FROM friendship AS f
  WHERE f.userID1 = '$thisUserID'
  AND f.userID2 = c.userID)
ORDER BY RAND()


CREATE OR REPLACE VIEW locationview AS SELECT DISTINCT userID
                              FROM user AS u2
                              WHERE u2.location IN
                                (SELECT location
                                FROM user
                                WHERE userID = '3')
                              AND u2.userID != '3'
                              AND NOT EXISTS
                                (SELECT *
                                FROM friendship AS f
                                WHERE f.userID1 = '3'
                                AND f.userID2 = u2.userID)
                              ORDER BY RAND()
---------------------------------------------------------------
//OLD GENERATE VIEW THIS IS THE WORST

$generateView = "CREATE OR REPLACE VIEW $viewString AS
                          (SELECT userID, COUNT(userID) AS matches
                          FROM (
                            (SELECT DISTINCT userID2 AS userID
                            FROM friendship AS fo
                            WHERE userID1 IN
                              (SELECT userID2
                              FROM friendship
                              WHERE userID1 = '$thisUserID')
                            AND status = 1
                            AND fo.userID2 NOT IN
                              (SELECT userID2
                              FROM friendship
                              WHERE userID1 = '$thisUserID')
                            AND userID2 != '$thisUserID'
                            ORDER BY RAND()
                            )
                          UNION ALL
                            (SELECT DISTINCT userID
                            FROM circle_participants AS c
                            WHERE c.circleID IN
                              (SELECT circleID
                              FROM circle_participants
                              WHERE userID = '$thisUserID')
                            AND userID != '$thisUserID'
                            AND NOT EXISTS
                              (SELECT *
                              FROM friendship AS f
                              WHERE f.userID1 = '$thisUserID'
                              AND f.userID2 = c.userID)
                            ORDER BY RAND()
                            )
                          UNION ALL
                            (SELECT DISTINCT userID
                            FROM user AS u2
                            WHERE u2.location IN
                              (SELECT location
                              FROM user
                              WHERE userID = '$thisUserID')
                            AND u2.userID != '$thisUserID'
                            AND NOT EXISTS
                              (SELECT *
                              FROM friendship AS f
                              WHERE f.userID1 = '$thisUserID'
                              AND f.userID2 = u2.userID)
                            ORDER BY RAND()
                            )
                          ) result
                          GROUP BY result.userID
                          ORDER BY matches DESC
                            )
                          ";
---------------------------------------------

CREATE OR REPLACE VIEW mutualview AS
(SELECT DISTINCT userID2 AS userID
FROM friendship AS fo
WHERE userID1 IN
  (SELECT userID2
  FROM friendship
  WHERE userID1 = '$thisUserID')
AND status = 1
AND fo.userID2 NOT IN
  (SELECT userID2
  FROM friendship
  WHERE userID1 = '$thisUserID')
AND userID2 != '$thisUserID'
ORDER BY RAND()
)

CREATE OR REPLACE VIEW circleview AS
(SELECT DISTINCT userID
FROM circle_participants AS c
WHERE c.circleID IN
  (SELECT circleID
  FROM circle_participants
  WHERE userID = '$thisUserID')
AND userID != '$thisUserID'
AND NOT EXISTS
  (SELECT *
  FROM friendship AS f
  WHERE f.userID1 = '$thisUserID'
  AND f.userID2 = c.userID)
ORDER BY RAND()
)

CREATE OR REPLACE VIEW locationview AS
(SELECT DISTINCT userID
FROM user AS u2
WHERE u2.location IN
  (SELECT location
  FROM user
  WHERE userID = '$thisUserID')
AND u2.userID != '$thisUserID'
AND NOT EXISTS
  (SELECT *
  FROM friendship AS f
  WHERE f.userID1 = '$thisUserID'
  AND f.userID2 = u2.userID)
ORDER BY RAND()
)

CREATE OR REPLACE VIEW nightmare1 AS

                            (SELECT * FROM mutualview)
                            UNION ALL
                            (SELECT * FROM circleview)
                            UNION ALL
                            (SELECT * FROM locationview)

CREATE OR REPLACE VIEW nightmare0 AS
                  SELECT userID, COUNT(userID) AS matches
                        FROM (nightmare1)
                            GROUP BY userID
                            ORDER BY matches DESC

-------------------------------------------
//nested views from hell
Version with numbers filled in for the lazy

CREATE OR REPLACE VIEW mutualview AS
(SELECT DISTINCT userID2 AS userID
FROM friendship AS fo
WHERE userID1 IN
  (SELECT userID2
  FROM friendship
  WHERE userID1 = '1')
AND status = 1
AND fo.userID2 NOT IN
  (SELECT userID2
  FROM friendship
  WHERE userID1 = '1')
AND userID2 != '1'
ORDER BY RAND()
)

CREATE OR REPLACE VIEW circleview AS
(SELECT DISTINCT userID
FROM circle_participants AS c
WHERE c.circleID IN
  (SELECT circleID
  FROM circle_participants
  WHERE userID = '1')
AND userID != '1'
AND NOT EXISTS
  (SELECT *
  FROM friendship AS f
  WHERE f.userID1 = '1'
  AND f.userID2 = c.userID)
ORDER BY RAND()
)

CREATE OR REPLACE VIEW locationview AS
(SELECT DISTINCT userID
FROM user AS u2
WHERE u2.location IN
  (SELECT location
  FROM user
  WHERE userID = '1')
AND u2.userID != '1'
AND NOT EXISTS
  (SELECT *
  FROM friendship AS f
  WHERE f.userID1 = '1'
  AND f.userID2 = u2.userID)
ORDER BY RAND()
)

---------------

CREATE OR REPLACE VIEW nightmare1 AS

                            (SELECT * FROM mutualview)
                            UNION ALL
                            (SELECT * FROM circleview)
                            UNION ALL
                            (SELECT * FROM locationview)
-------------

CREATE OR REPLACE VIEW nightmare0 AS
                  SELECT userID, COUNT(userID) AS matches
                        FROM (nightmare1)
                            GROUP BY userID
                            ORDER BY matches DESC
